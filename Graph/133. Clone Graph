Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/ 
         
 题意：克隆一副无向图
 
 思路：DFS；BFS
 
 BFS：
/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        if(!node) return NULL;
        UndirectedGraphNode* copy = new UndirectedGraphNode(node->label);
        queue<UndirectedGraphNode*> q;
        q.push(copy);
        while(!q.empty()){
            UndirectedGraphNode* cur = q.front();
            q.pop();
            for(UndirectedGraphNode* neigh : cur->neighbors){       
                if(mp.find(neigh) == mp.end()){
                    UndirectedGraphNode* neigh_copy = new UndirectedGraphNode(neigh->label);
                    mp[neigh] = neigh_copy;
                    q.push(neigh);
                }
                mp[cur]->neighbors.push_back(mp[neigh]);
            }
        }
        return copy;
    }    
private:
    unordered_map<UndirectedGraphNode *, UndirectedGraphNode *> mp;
};

DFS：
class Solution {
public:
    map<UndirectedGraphNode *, UndirectedGraphNode *> m;
    
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) 
    {
        if(node == NULL)
            return NULL;
        
        if(m.find(node) != m.end())   //if node is visited, just return the recorded nodeClone
            return m[node];
            
        UndirectedGraphNode *nodeClone = new UndirectedGraphNode(node->label);
        m[node] = nodeClone;
        for(int st = 0; st < node->neighbors.size(); st ++)
        {
            UndirectedGraphNode *temp = cloneGraph(node->neighbors[st]);
            if(temp != NULL)
                nodeClone->neighbors.push_back(temp);
        }
        return nodeClone;
    }
};
