Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

本题有两个坑
1.root为NULL是BST
2.如果tree中存在两个相等的数，则不是BST;这跟PAT将相等的node可任意放在左或右子树的处理方法不同

Me:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> in;
    void buildin(TreeNode* root)
    {
        if(root->left != NULL)
            buildin(root->left);
        in.push_back(root->val);
        if(root->right != NULL)
            buildin(root->right);
    }
    
    bool isValidBST(TreeNode* root) {
        //NULL is also a BST?
        if(root == NULL) return true;
        //level order -> inorder
        buildin(root);
        //verify wheter the value of inorder is ascending
        for(int i=0;i<in.size()-1;i++)
        {
            if(in[i] >= in[i+1]) return false;
        }
        return true;
    }
};

Discuss:
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        return isValidBST(root, numeric_limits<long>::min(), numeric_limits<long>::max());
    }
    
private:
    bool isValidBST(TreeNode* node, long minLimit, long maxLimit) {
        if (node == nullptr) {
            return true;
        }
        
        if (node->val <= minLimit || node->val >= maxLimit) {
            return false;
        }
        
        return isValidBST(node->left, minLimit, (long) node->val) && isValidBST(node->right, (long) node->val, maxLimit);
    }
};
