Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).
Credits:
Special thanks to @jianchao.li.fighter for adding this problem and all test cases.

题意：用队列模拟栈

思路：用一个队列模拟栈，pop(), top(), empty()两者相似，对于push()，先push x, 记录push前队列的元素个数，再进行push(), pop()操作，颠倒元素顺序

class MyStack {
public:
    queue<int> q;
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        int size = q.size();
        q.push(x);
        for(int i=0; i<size; i++)
        {
            int tmp = q.front();
            q.push(tmp);
            q.pop();
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int ans = q.front();
        q.pop();
        return ans;
    }
    
    /** Get the top element. */
    int top() {
        return q.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
 
 Discuss:
 class MyStack {
private:
    queue<int> q, p;

public:
    /** Initialize your data structure here. */
    MyStack() {
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        if(p.empty()){
            p.push(x);
            while(!q.empty()){
                p.push(q.front());
                q.pop();
            }
        }
        else{
            q.push(x);
            while(!p.empty()){
                q.push(p.front());
                p.pop();
            }            
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int temp = top();
        if(!p.empty())
            p.pop();
        else
            q.pop();
        return temp;
    }
    
    /** Get the top element. */
    int top() {
        return p.empty() ? q.front() : p.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return p.empty() && q.empty();
    }
};
