Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

Example 1:
Input: "Let's take LeetCode contest"
Output: "s'teL ekat edoCteeL tsetnoc"
Note: In the string, each word is separated by single space and there will not be any extra space in the string.

题意：将一个sentence中的每个word翻转后输出

思路: start记录word的起始位置，s[i] == ' '，进行翻转；
      要考虑句子结尾的情况，reverse(s.begin() + start, s.end())
      
Me:
class Solution {
public:
    string reverseWords(string s) {
        if(s == "") return "";
        int start = 0;
        for(int i=0;i<s.size();i++)
        {
            if(s[i] == ' ')
            {
                reverse(s.begin() + start, s.begin() + i);
                start = i + 1;
            }
        }
        reverse(s.begin() + start, s.end());
        return s;
    }
};

Discuss:
//用字符串流
class Solution {
public:
    string reverseWords(string s) {
        istringstream is(s);
        string tmp;
        is >> s;
        reverse(s.begin(), s.end());
        while(is >> tmp)
        {
            reverse(tmp.begin(), tmp.end());
            s= s + " " + tmp;
        }
        if(!s.empty() && s[0] == ' ') s="";
        return s;
    }
};

//用swap()函数
class Solution {
public:
    string reverseWords(string s) {
        int i=0, j=0;
        while(j<s.size()) {
            if(s[j]==' ') {
                if(i<j-1) reverse(s, i, j-1);
                j++;
                i=j;
            } else j++;
        }
        if(i<j) reverse(s, i, j-1);
        return s;
    }
    
    void reverse(string &s, int i, int j) {
        while(i<j) {
            swap(s[i], s[j]);
            i++;
            j--;
        }
    }
};
