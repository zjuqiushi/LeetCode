Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 19 is a happy number

12 + 92 = 82
82 + 22 = 68
62 + 82 = 100 
12 + 02 + 02 = 1

题意：依次循环相加各个位数平方和，判断最后结果是否会出现1

思路：set存储出现过的数字，当出现重复数字或1时，结束循环

Me:
class Solution {
public:
    bool isHappy(int n) {
        int cnt = 0;
        set<int> s;
        while(n != 1 && cnt <= 100)
        {
            int num = 0;
            while(n != 0)
            {
                num += pow(n % 10, 2);
                n = n / 10;
            }
            n = num;
            if(s.find(n) == s.end())
                s.insert(n);
            else
                return false;
            cnt ++;
        }
        if(cnt > 100)
            return false;
        else
            return true;
    }
};

Discuss:
bool isHappy(int n){  
    map<int, int> int_map;  
    if (n==1) {  
        return true;  
    }  
    int sum = 0;  
    while (n != 1) {  
        int_map.insert(pair<int , int>(n, n));  
        sum = countN(n);  
        if (sum ==1) {  
            return true;  
        }  
        if(int_map.count(sum))  
            return false;  
        n = sum;  
    }  
    return true;  
} 
