Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.

Example 1:
Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].
Note:
The range of node's value is in the range of 32-bit signed integer.

题意：计算一颗二叉树各个层级的平均值，并以vector返回

思路：dfs遍历，m1, m2, m3分别存储total, cnt, avg

Me:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    map<int, double> m1;
    map<int, int> m2;
    map<int, double> m3;
    void dfs(TreeNode* root, int depth)
    {
        if(root)
        {
            m1[depth] += root->val * 1.0;
            m2[depth] ++;
            m3[depth] = m1[depth] / m2[depth];
        }
        if(root->left)
            dfs(root->left, depth + 1);
        if(root->right)
            dfs(root->right, depth +1);
    }
    
    vector<double> averageOfLevels(TreeNode* root) {
        dfs(root, 0);
        vector<double> ans;
        for(auto it = m3.begin(); it!=m3.end(); it++)
            ans.push_back(it->second);
        return ans;
    }
};

Discuss:
//BFS 要注意sum是long类型，防止溢出
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> result;
        queue<TreeNode*> qu;
        qu.push(root);
        while (!qu.empty())
        {
            long tmp = 0;
            int size = qu.size();
            for (int i = 0; i < size; i++)
            {
                TreeNode* t = qu.front();
                qu.pop();
                if (t->left) qu.push(t->left);
                if (t->right) qu.push(t->right);
                
                tmp += t->val;
            }
            
            result.push_back((double)tmp / size);
        }
        
        return result;
    }
};
