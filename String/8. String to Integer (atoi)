Implement atoi to convert a string to an integer.

Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible 
input cases.

Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input 
requirements up front.

Requirements for atoi:
The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. 

Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, 
and interprets them as a numerical value.

The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the 
behavior of this function.

If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either 
str is empty or it contains only whitespace characters, no conversion is performed.

If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, 
INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.


Me:
class Solution {
public:
    int myAtoi(string str) {
        long long tmpans = 0;
        //erase white space
        while(str != "" && str[0] == ' ') str.erase(0,1);
        //decide sign
        bool sign = true;
        if(str != "")
        {
            if(str[0] == '-')
            {
                sign = false;
                str.erase(0,1);
            }
            else if(str[0] == '+')
                str.erase(0,1);
        }
        //count
        for(int i=0;i<str.size();i++)
        {
            if(str[i]>='0' && str[i]<='9')
            {
                tmpans = tmpans*10 + str[i] - '0';
                if(tmpans > INT_MAX)
                {
                    if(sign)
                        return INT_MAX;
                    else
                        return INT_MIN;
                }
            }
            else
                break;
        }
        //output
        if(sign)
            return (int)tmpans;
        else
            return -(int)tmpans;
    }
};

class Solution {
public:
    int myAtoi(string str) {
        if (str.empty()) {
            return 0;
        }

        int ans = 0;
        int sign = 1;
        int i = 0;

        while (str[i] == ' ') {
            ++i;
        }

        if (str[i] == '+') {
            ++i;
        } else if (str[i] == '-') {
            sign = -1;
            ++i;
        }

        for (; i < str.length() && isdigit(str[i]); ++i) {
            if (ans > (numeric_limits<int>::max() - (str[i] - '0')) / 10) { 
                return sign > 0 ? numeric_limits<int>::max() : numeric_limits<int>::min();
            }
            ans *= 10;
            ans += str[i] - '0';
        }

        ans *= sign;
        return ans;
    }
};
