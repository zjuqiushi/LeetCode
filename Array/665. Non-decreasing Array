Given an array with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.

We define an array is non-decreasing if array[i] <= array[i + 1] holds for every i (1 <= i < n).

Example 1:
Input: [4,2,3]
Output: True
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.

Example 2:
Input: [4,2,1]
Output: False
Explanation: You can't get a non-decreasing array by modify at most one element.
Note: The n belongs to [1, 10,000].

题意：能否最多改动一个元素，将数组变为非降序数组

思路: 
1. cnt记录需改动元素个数，若cnt>1，return false
2. nums[i] > nums[i+1]，需根据nums[i-1]是否大于nums[i+1]来判断需要修改哪个值，若nums[i-1] <= nums[i+1]，nums[i] = nums[i+1];否则，nums[i+1]=nums[i]

Me:
//3,4,2,3   -1,4,2,3    2,3,3,2,4
class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        int cnt = 0;
        for(int i=0;i<nums.size()-1 && cnt <= 1;i++)
        {
            if(nums[i] > nums[i+1])
            {
                cnt++;
                if(i-1<0 || nums[i-1] <= nums[i+1]) 
                    nums[i] = nums[i+1];
                else
                    nums[i+1] = nums[i];
            }
        }
        return cnt <= 1;
    }
};

Discuss:
class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        bool canModify = true;
        
        for(int i = 0; i < nums.size()-1; ++i){
            if(nums[i] > nums[i+1]){
                if(canModify){
                    if(i == 0 || nums[i+1] >= nums[i-1]) {
                        //nums[i] = nums[i+1];  //can skip 
                    }
                    else nums[i+1] = nums[i];
                    canModify = false;
                }
                else{
                    return false;
                }
            }
        }
        return true;
    }
};
