Given a list of positive integers, the adjacent integers will perform the float division. For example, [2,3,4] -> 2 / 3 / 4.

However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. Your expression should NOT contain redundant parenthesis.

Example:
Input: [1000,100,10,2]
Output: "1000/(100/10/2)"
Explanation:
1000/(100/10/2) = 1000/((100/10)/2) = 200
However, the bold parenthesis in "1000/((100/10)/2)" are redundant, 
since they don't influence the operation priority. So you should return "1000/(100/10/2)". 

Other cases:
1000/(100/10)/2 = 50
1000/(100/(10/2)) = 50
1000/100/10/2 = 0.5
1000/100/(10/2) = 2
Note:

The length of the input array is [1, 10].
Elements in the given array will be in range [2, 1000].
There is only one optimal division for each test case.

题意：给定一个数组，写成除法形式，通过添加括号使得结果的值最大，要求括号一定要改变运算的优先级

思路：X1/X2/X3.../Xn,X1、X2一定是分子和分母,可表达为(X1/X2)*Y,要使结果最大，另Y=X3*X4..*Xn即可

Me:
class Solution {
public:
    string optimalDivision(vector<int>& nums) {
        string str;
        if(nums.size() == 0)
            return str;
        else if(nums.size() == 1)
            return to_string(nums[0]);
        else if(nums.size() == 2){
            for(int i=0; i<nums.size(); i++){
                if(i == 0)
                    str += to_string(nums[i]);
                else{
                    str += "/";
                    str += to_string(nums[i]);
                }
            }
            return str;
        }
        int len = nums.size() - 1;
        for(int i = 0; i< nums.size(); i++){
            if(i == 0)
                str += to_string(nums[i]);
            else if(i == 1){
                str += "/(";
                str += to_string(nums[i]);
            }
            else if (i == len){
                str += "/";
                str += to_string(nums[i]);
                str += ")";
            }
            else{
                str += "/";
                str += to_string(nums[i]);
            }  
        }
        return str;
    }
};

Discuss:
class Solution {
public:
    string optimalDivision(vector<int>& nums) {
        string ans;
        if(!nums.size()) return ans;
        ans = to_string(nums[0]);
        if(nums.size()==1) return ans;
        if(nums.size()==2) return ans + "/" + to_string(nums[1]);
        ans += "/(" + to_string(nums[1]);
        for(int i = 2; i < nums.size();++i)
            ans += "/" + to_string(nums[i]);
        ans += ")";
        return ans;
    }
};
