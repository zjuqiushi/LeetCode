Implement the following operations of a queue using stacks.

push(x) -- Push element x to the back of queue.
pop() -- Removes the element from in front of queue.
peek() -- Get the front element.
empty() -- Return whether the queue is empty.
Notes:
You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).

题意：用栈模拟队列

思路：用两个栈模拟队列

class MyQueue {
public:
    stack<int> input, output;
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        input.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int ans = peek();
        output.pop();
        return ans;
    }
    
    /** Get the front element. */
    int peek() {
        if(output.empty())
        {
            while(!input.empty())
            {
                output.push(input.top());
                input.pop();
            }
        }
        return output.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return input.empty() && output.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */
 
 Discuss:
 class MyQueue {
    stack<int> input;
    stack<int> output;
    int tp;
    
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        if(input.empty())tp = x;
        input.push(x);
        
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        if(!output.empty()) 
        {
            int data = output.top();
            output.pop();
            return data;
        }
        while(!input.empty())
        {
            int data = input.top();
            input.pop();
            output.push(data);
        }
        int ans = output.top();
        output.pop();
        return ans;
        
    }
    
    /** Get the front element. */
    int peek() {
        if(!output.empty())return output.top();
        else return tp;
        
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        if(input.empty() && output.empty())return true;
        else return false;
        
    }
};
